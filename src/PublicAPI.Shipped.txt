#nullable enable
virtual WB.Disposable.DisposableObject.Dispose(bool disposeManagedResources) -> void
virtual WB.Disposable.DisposableObject.DisposeAsync(bool disposeManagedResources) -> System.Threading.Tasks.ValueTask
virtual WB.Disposable.DisposableObject.DisposeManagedResources() -> void
virtual WB.Disposable.DisposableObject.DisposeManagedResourcesAsync() -> System.Threading.Tasks.ValueTask
virtual WB.Disposable.DisposableObject.DisposeUnmanagedResources() -> void
virtual WB.Disposable.DisposableObject.DisposeUnmanagedResourcesAsync() -> System.Threading.Tasks.ValueTask
WB.Disposable.ActionDisposable
WB.Disposable.ActionDisposable.ActionDisposable(params System.Action![]! actions) -> void
WB.Disposable.ActionDisposable.ActionDisposable(System.Action! action) -> void
WB.Disposable.DisposableList<T>
WB.Disposable.DisposableList<T>.Add(T item) -> void
WB.Disposable.DisposableList<T>.Clear() -> void
WB.Disposable.DisposableList<T>.Contains(T item) -> bool
WB.Disposable.DisposableList<T>.CopyTo(T[]! array, int arrayIndex) -> void
WB.Disposable.DisposableList<T>.Count.get -> int
WB.Disposable.DisposableList<T>.DisposableList() -> void
WB.Disposable.DisposableList<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>!
WB.Disposable.DisposableList<T>.IndexOf(T item) -> int
WB.Disposable.DisposableList<T>.Insert(int index, T item) -> void
WB.Disposable.DisposableList<T>.IsReadOnly.get -> bool
WB.Disposable.DisposableList<T>.Remove(T item) -> bool
WB.Disposable.DisposableList<T>.RemoveAt(int index) -> void
WB.Disposable.DisposableList<T>.this[int index].get -> T
WB.Disposable.DisposableList<T>.this[int index].set -> void
WB.Disposable.DisposableObject
WB.Disposable.DisposableObject.DisposableObject() -> void
WB.Disposable.DisposableObject.Dispose() -> void
WB.Disposable.DisposableObject.DisposeAsync() -> System.Threading.Tasks.ValueTask
WB.Disposable.DisposableObject.IsDisposed.get -> bool
WB.Disposable.DisposableObject.IsDisposed.set -> void
WB.Disposable.DisposableObject.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler?
WB.Disposable.DisposableObject.~DisposableObject() -> void
